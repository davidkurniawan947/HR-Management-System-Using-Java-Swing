/**
 * Week 15 - Panel Location
 * @author David Kurniawan
 * @nrp 2173007
 * @date 21 Juni 2022
 */
package view;

import control.LocationsDao;
import control.RegionsDao;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import model.Countries;
import model.Locations;
import model.Regions;

/**
 *
 * @author MSI
 */
public class PanelLocations extends javax.swing.JPanel implements ListSelectionListener{
    RegionsDao daoRegions;
    LocationsDao daoLoc;
    List<Countries> dataCou;
    List<Regions> dataReg;
    private Locations locat;
    DefaultTableModel dataLocat;
    
    public PanelLocations() {
        initComponents();
        daoRegions = new RegionsDao();
        daoLoc = new LocationsDao();
        dataLocat = (DefaultTableModel) tabelLocat.getModel();
        reset();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        region = new javax.swing.JComboBox<>();
        country = new javax.swing.JComboBox<>();
        id = new javax.swing.JTextField();
        postal = new javax.swing.JTextField();
        city = new javax.swing.JTextField();
        state = new javax.swing.JTextField();
        save = new javax.swing.JButton();
        del = new javax.swing.JButton();
        rest = new javax.swing.JButton();
        street = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelLocat = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Kelola Data Locations", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N

        jLabel2.setText("ID");

        jLabel3.setText("Region");

        jLabel4.setText("Country");

        jLabel5.setText("Postal Code");

        jLabel6.setText("City");

        jLabel7.setText("State Province");

        jLabel8.setText("Street Address");

        region.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        region.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regionActionPerformed(evt);
            }
        });
        region.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                regionPropertyChange(evt);
            }
        });

        country.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        id.setEditable(false);

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        del.setText("Delete");
        del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delActionPerformed(evt);
            }
        });

        rest.setText("Reset");
        rest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restActionPerformed(evt);
            }
        });

        street.setColumns(20);
        street.setRows(5);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(del, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(street, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rest, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel3)
                        .addComponent(jLabel4)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(76, 76, 76)
                            .addComponent(id))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(state, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(24, 24, 24)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(city, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                                    .addComponent(postal)))
                            .addComponent(country, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(region, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(region, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(country, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(postal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(city, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(state, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(street, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save)
                    .addComponent(rest))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(del)
                .addContainerGap(176, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 23;
        gridBagConstraints.ipady = 163;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 1, 13, 0);
        add(jPanel1, gridBagConstraints);

        tabelLocat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Location ID", "Region Name", "Country Name", "Street Address", "Postal Code", "City", "State Province"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelLocat);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 467;
        gridBagConstraints.ipady = 508;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 13, 12);
        add(jScrollPane1, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Kelola Master Data Location");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 107, 0, 0);
        add(jLabel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
    if (city.getText().trim().isEmpty()) {
      JOptionPane.showMessageDialog(this, "City is required!", "Warning Message", 2);
    } else {
      save();
    } 
    }//GEN-LAST:event_saveActionPerformed

    private void delActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delActionPerformed
        delete();
    }//GEN-LAST:event_delActionPerformed

    private void restActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restActionPerformed
        reset();
    }//GEN-LAST:event_restActionPerformed

    private void regionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regionActionPerformed
        try {
      dataCou = daoRegions.getAllDataCountries(((Regions)dataReg.get(region.getSelectedIndex())).getRegionId().intValue());
      listCountryComboBox();
      if (locat.getLocationId() == null) {
        country.setSelectedIndex(0);
      } else {
        country.setSelectedItem(locat.getCountryId().getCountryName());
      } 
    } catch (Exception exception) {}
    }//GEN-LAST:event_regionActionPerformed

    private void regionPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_regionPropertyChange
        try {
      dataCou = daoRegions.getAllDataCountries(((Regions)dataReg.get(this.region.getSelectedIndex())).getRegionId().intValue());
      listCountryComboBox();
      if (locat.getLocationId() == null) {
        country.setSelectedIndex(0);
      } else {
        country.setSelectedItem(locat.getCountryId().getCountryName());
      } 
    } catch (Exception exception) {}
    }//GEN-LAST:event_regionPropertyChange


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField city;
    private javax.swing.JComboBox<String> country;
    private javax.swing.JButton del;
    private javax.swing.JTextField id;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField postal;
    private javax.swing.JComboBox<String> region;
    private javax.swing.JButton rest;
    private javax.swing.JButton save;
    private javax.swing.JTextField state;
    private javax.swing.JTextArea street;
    private javax.swing.JTable tabelLocat;
    // End of variables declaration//GEN-END:variables
    private void save() {
        if (locat.getCountryId() == null) {
            locat.setCountryId(dataCou.get(country.getSelectedIndex()));
            locat.setStreetAddress(street.getText().trim());
            locat.setPostalCode(postal.getText().trim());
            locat.setCity(city.getText().trim());
            locat.setStateProvince(state.getText().trim());
            if (this.daoLoc.insertData(locat)) {
                JOptionPane.showMessageDialog(this, "Data Location berhasil ditambah!", "Information Message", 1);
                reset();
            } else {
                JOptionPane.showMessageDialog(this, "Data Location gagal ditambah!", "Warning Message", 2);
            } 
        } else {
            locat.setCountryId(dataCou.get(country.getSelectedIndex()));
            locat.setStreetAddress(street.getText().trim());
            locat.setPostalCode(postal.getText().trim());
            locat.setCity(city.getText().trim());
            locat.setStateProvince(state.getText().trim());
            if (this.daoLoc.updateData(locat)) {
                JOptionPane.showMessageDialog(this, "Data Location berhasil diubah!", "Information Message", 1);
                reset();
            } else {
                JOptionPane.showMessageDialog(this, "Data Location gagal diubah!", "Warning Message", 2);
            } 
        } 
    }
    
    private void delete() {
        if (locat.getCountryId() == null) {
            JOptionPane.showMessageDialog(this, "Data Location tidak ada!", "Warning Message", 2);
        } else if (locat.getDepartmentsList().isEmpty()) {
            if (JOptionPane.showConfirmDialog(this, "Apakah Anda akan menghapus Data Location?", "Confirmation Delete", 2, 3) == 0) {
                if (this.daoLoc.deleteData(locat)) {
                    JOptionPane.showMessageDialog(this, "Data Location berhasil dihapus!", "Information Message", 1);
                    reset();
                } else {
                    JOptionPane.showMessageDialog(this, "Data Location gagal dihapus!", "Warning Message", 2);
                } 
            } else {
                JOptionPane.showMessageDialog(this, "Data Location batal dihapus!", "Information Message", 1);
            } 
        } else {
            JOptionPane.showMessageDialog(this, "Data Location tidak dapat dihapus!", "Warning Message", 2);
        } 
    }

    public void reset() {
        locat = new Locations();
        id.setText("");
        listRegionsComboBox();
        region.setSelectedIndex(0);
        street.setText("");
        postal.setText("");
        city.setText("");
        state.setText("");
        listLocations();
    }
    
    private void listLocations() {
        tabelLocat.getSelectionModel().removeListSelectionListener(this);
        dataLocat.getDataVector().removeAllElements();
        for (Locations l : this.daoLoc.getAllData()) {
            dataLocat.addRow(new Object[] { 
            l.getLocationId(), 
            (l.getCountryId() == null) ? "-" : (
            (l.getCountryId().getRegionId() == null) ? "-" : l.getCountryId().getRegionId().getRegionName()), 
            (l.getCountryId() == null) ? "-" : l.getCountryId().getCountryName(), 
            (l.getStreetAddress() == null) ? "-" : l.getStreetAddress(), 
            (l.getPostalCode() == null) ? "-" : l.getPostalCode(), 
            l.getCity(), 
            (l.getStateProvince() == null) ? "-" : l.getStateProvince() });
        } 
        tabelLocat.getSelectionModel().addListSelectionListener(this);
    }
    
    public void valueChanged(ListSelectionEvent e) {
        if (e.getSource() == tabelLocat.getSelectionModel())
            try {
                locat = daoLoc.getData(Integer.parseInt(tabelLocat.getValueAt(tabelLocat.getSelectedRow(), 0).toString()));
                id.setText(locat.getCountryId().toString());
                region.setSelectedItem(locat.getCountryId().getRegionId().getRegionName());
                street.setText(locat.getStreetAddress());
                postal.setText(locat.getPostalCode());
                city.setText(locat.getCity());
                state.setText(locat.getStateProvince());
            } catch (Exception exception) {} 
        }
    
    public void listRegionsComboBox() {
        dataReg = daoRegions.getAllData();
        String[] data = new String[dataReg.size()];
        for (int i = 0; i < data.length; i++)
            data[i] = ((Regions)dataReg.get(i)).getRegionName(); 
            region.setModel(new DefaultComboBoxModel<>(data));
    }
    
    public void listCountryComboBox() {
        String[] data = new String[dataCou.size()];
        for (int i = 0; i < data.length; i++)
            data[i] = ((Countries)dataCou.get(i)).getCountryName(); 
            country.setModel(new DefaultComboBoxModel<>(data));
    }
}
